rm(sum_p_lnp)
}
View(H)
Data[[1, 2]]
Data[[1, 1]]
sum(Data[[2]]
, na.rm = TRUE)
p_i <- Data[[2, 2]] / sum(Data[[2]], na.rm = TRUE)
lnp_i <- log(Data[[2, 2]] / sum(Data[[2]], na.rm = TRUE), base = exp(1))
is.na(lnp_i
)
p_i <- Data[[3, 2]] / sum(Data[[2]], na.rm = TRUE)
lnp_i <- log(Data[[3, 2]] / sum(Data[[2]], na.rm = TRUE), base = exp(1))
is.na(lnp_i
)
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
for (j in c(2 : Grid_no + 1)) {
for (i in length(Data$Species)) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
H[[j]] <- -sum_p_lnp
}
rm(sum_p_lnp)
}
View(H)
H <- list()
for (j in c(2 : Grid_no + 1)) {
for (i in length(Data$Species)) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
H[[j]] <- -sum_p_lnp
}
rm(sum_p_lnp)
}
View(H)
lnp_i
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
H <- list()
for (j in c(2 : Grid_no + 1)) {
for (i in length(Data$Species)) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j]] <- -sum_p_lnp
rm(sum_p_lnp)
}
View(H)
H <- list()
for (j in c(2 : Grid_no + 1)) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j]] <- -sum_p_lnp
rm(sum_p_lnp)
}
View(H)
# Function ---------------------------------
# Set the function
Shannon <- function(Path, Sheet, Range, Export,
Lat_min, Lat_max, Lat_int,
Lon_min, Lon_max, Lon_int) {
#load in data
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = ((Lat_max - Lat_min) / Lat_int) + 1)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = ((Lon_max - Lon_min) / Lon_int) + 1)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species", paste0(Lat, "_", Lon))
)
#loop calculate H' for each grid
Grid_no <- (((Lat_max - Lat_min) / Lat_int) + 1) *
(((Lon_max - Lon_min) / Lon_int) + 1)
H <- list()
for (j in c(2 : Grid_no + 1)) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j]] <- -sum_p_lnp
rm(sum_p_lnp)
}
names(H) <- paste0(Lat, "_", Lon)
write.csv(H, file = Export)
}
LoadPath <- "D:/HsuWP/藍哥研究室/雜/昀庭/香濃多樣性指數範例.xlsx"
DataSheet <- "匯入格式"
DataRange <- "B3:AL28"
ExportPath <- "D:/H.csv"
MinLat <- 23
MaxLat <- 25.5
IntLat <- 0.5
MinLon <- 121
MaxLon <- 123.5
IntLon <- 0.5
# Use function "Shannon" ---------------------------------
# Load in data, calculate Shannon's diversity index (H'), and export it.
Shannon(Path = LoadPath, Sheet = DataSheet,
Range = DataRange, Export = ExportPath,
Lat_min = MinLat, Lat_max = MaxLat, Lat_int = IntLat,
Lon_min = MinLon, Lon_max = MaxLon, Lon_int = IntLon)
Grid_no=36
2 : Grid_no + 1
# Function ---------------------------------
# Set the function
Shannon <- function(Path, Sheet, Range, Export,
Lat_min, Lat_max, Lat_int,
Lon_min, Lon_max, Lon_int) {
#load in data
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = ((Lat_max - Lat_min) / Lat_int) + 1)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = ((Lon_max - Lon_min) / Lon_int) + 1)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species", paste0(Lat, "_", Lon))
)
#loop calculate H' for each grid
Grid_no <- (((Lat_max - Lat_min) / Lat_int) + 1) *
(((Lon_max - Lon_min) / Lon_int) + 1)
H <- list()
for (j in c(2 : (Grid_no + 1))) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j]] <- -sum_p_lnp
rm(sum_p_lnp)
}
names(H) <- paste0(Lat, "_", Lon)
write.csv(H, file = Export)
}
# Use function "Shannon" ---------------------------------
# Load in data, calculate Shannon's diversity index (H'), and export it.
Shannon(Path = LoadPath, Sheet = DataSheet,
Range = DataRange, Export = ExportPath,
Lat_min = MinLat, Lat_max = MaxLat, Lat_int = IntLat,
Lon_min = MinLon, Lon_max = MaxLon, Lon_int = IntLon)
Path = LoadPath
Sheet = DataSheet
Range = DataRange
Export = ExportPath
Lat_min = MinLat
Lat_max = MaxLat
Lat_int = IntLat
Lon_min = MinLon
Lon_max = MaxLon
Lon_int = IntLon
#load in data
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = ((Lat_max - Lat_min) / Lat_int) + 1)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = ((Lon_max - Lon_min) / Lon_int) + 1)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species", paste0(Lat, "_", Lon))
)
View(Data)
#loop calculate H' for each grid
Grid_no <- (((Lat_max - Lat_min) / Lat_int) + 1) *
(((Lon_max - Lon_min) / Lon_int) + 1)
H <- list()
for (j in c(2 : (Grid_no + 1))) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j]] <- -sum_p_lnp
rm(sum_p_lnp)
}
View(H)
2 : (Grid_no + 1)
c(2 : (Grid_no + 1))
c(1 : length(Data$Species))
for (j in c(2 : (Grid_no + 1))) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j-1]] <- -sum_p_lnp
rm(sum_p_lnp)
}
View(H)
H <- list()
for (j in c(2 : (Grid_no + 1))) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j-1]] <- -sum_p_lnp
rm(sum_p_lnp)
}
View(H)
# Function ---------------------------------
# Set the function
Shannon <- function(Path, Sheet, Range, Export,
Lat_min, Lat_max, Lat_int,
Lon_min, Lon_max, Lon_int) {
#load in data
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = ((Lat_max - Lat_min) / Lat_int) + 1)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = ((Lon_max - Lon_min) / Lon_int) + 1)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species", paste0(Lat, "_", Lon))
)
#loop calculate H' for each grid
Grid_no <- (((Lat_max - Lat_min) / Lat_int) + 1) *
(((Lon_max - Lon_min) / Lon_int) + 1)
H <- list()
for (j in c(2 : (Grid_no + 1))) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j-1]] <- -sum_p_lnp
rm(sum_p_lnp)
}
names(H) <- paste0(Lat, "_", Lon)
write.csv(H, file = Export)
}
LoadPath <- "D:/HsuWP/藍哥研究室/雜/昀庭/香濃多樣性指數範例.xlsx"
DataSheet <- "匯入格式"
DataRange <- "B3:AL28"
ExportPath <- "D:/H.csv"
MinLat <- 23
MaxLat <- 25.5
IntLat <- 0.5
MinLon <- 121
MaxLon <- 123.5
IntLon <- 0.5
LoadPath <- "D:/HsuWP/藍哥研究室/雜/昀庭/香濃多樣性指數範例.xlsx"
DataSheet <- "匯入格式"
DataRange <- "B3:AL28"
ExportPath <- "D:/H.csv"
MinLat <- 23
MaxLat <- 25.5
IntLat <- 0.5
MinLon <- 121
MaxLon <- 123.5
IntLon <- 0.5
# Use function "Shannon" ---------------------------------
# Load in data, calculate Shannon's diversity index (H'), and export it.
Shannon(Path = LoadPath, Sheet = DataSheet,
Range = DataRange, Export = ExportPath,
Lat_min = MinLat, Lat_max = MaxLat, Lat_int = IntLat,
Lon_min = MinLon, Lon_max = MaxLon, Lon_int = IntLon)
# Function ---------------------------------
# Set the function
Shannon <- function(Path, Sheet, Range, Export,
Lat_min, Lat_max, Lat_int,
Lon_min, Lon_max, Lon_int) {
#load in data
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = ((Lat_max - Lat_min) / Lat_int) + 1)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = ((Lon_max - Lon_min) / Lon_int) + 1)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species", paste0(Lat, "_", Lon))
)
#loop calculate H' for each grid
Grid_no <- (((Lat_max - Lat_min) / Lat_int) + 1) *
(((Lon_max - Lon_min) / Lon_int) + 1)
H <- list()
for (j in c(2 : (Grid_no + 1))) {
for (i in c(1 : length(Data$Species))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(Data[[i, j]] / sum(Data[[j]], na.rm = TRUE), base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j-1]] <- -sum_p_lnp
rm(sum_p_lnp)
}
names(H) <- paste0(Lat, "_", Lon)
write.csv(H, file = Export)
}
DataRange <- "C3:AL28"
Path = LoadPath
Sheet = DataSheet
Range = DataRange
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range
)
View(Data)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species"
)
)
Lat_min = MinLat
Lat_max = MaxLat
Lat_int = IntLat
Lon_int = IntLon
Lon_max = MaxLon
Lon_min = MinLon
#load in data
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = ((Lat_max - Lat_min) / Lat_int) + 1)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = ((Lon_max - Lon_min) / Lon_int) + 1)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c("Species", paste0(Lat, "_", Lon))
)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = c(
paste0(Lat, "_", Lon))
)
View(Data)
length(Data[[1]]
)
length(Data
)
View(Data)
?length
# Function ---------------------------------
# Set the function
Shannon <- function(Path, Sheet, Range, Export,
Lat_min, Lat_max, Lat_int,
Lon_min, Lon_max, Lon_int) {
#load in data
Lat_grid_no <- ((Lat_max - Lat_min) / Lat_int) + 1
Lon_grid_no <- ((Lon_max - Lon_min) / Lon_int) + 1
Lat <- rep(seq(from = Lat_min, to = Lat_max, by = Lat_int),
times = Lat_grid_no)
Lon <- rep(seq(from = Lon_min, to = Lon_max, by = Lon_int),
each = Lon_grid_no)
Data <- read_excel(
path = Path,
sheet = Sheet,
range = Range,
col_names = paste0(Lat, "_", Lon)
)
#loop calculate H' for each grid
Grid_no <- Lat_grid_no * Lon_grid_no
H <- list()
for (j in c(1 : Grid_no)) {
for (i in c(1 : length(Data[[1]]))) {
p_i <- Data[[i, j]] / sum(Data[[j]], na.rm = TRUE)
lnp_i <- log(p_i, base = exp(1))
if (is.na(lnp_i)) {
next
} else {
if (exists("sum_p_lnp")) {
sum_p_lnp <- sum_p_lnp + p_i * lnp_i
} else {
sum_p_lnp <- p_i * lnp_i
}
}
}
H[[j]] <- -sum_p_lnp
rm(sum_p_lnp)
}
names(H) <- paste0(Lat, "_", Lon)
write.csv(H, file = Export)
}
# 所匯入Excel檔之路徑、工作表名稱、資料範圍及欲匯出結果之路徑
LoadPath <- "D:/HsuWP/藍哥研究室/雜/昀庭/香濃多樣性指數範例.xlsx"
DataSheet <- "匯入格式"
DataRange <- "C3:AL28"
ExportPath <- "D:/H.csv"
# 經緯度網格之最小、最大值及其間距
MinLat <- 23
MaxLat <- 25.5
IntLat <- 0.5
MinLon <- 121
MaxLon <- 123.5
IntLon <- 0.5
# Use function "Shannon" ---------------------------------
# Load in data, calculate Shannon's diversity index (H'), and export it.
Shannon(Path = LoadPath, Sheet = DataSheet,
Range = DataRange, Export = ExportPath,
Lat_min = MinLat, Lat_max = MaxLat, Lat_int = IntLat,
Lon_min = MinLon, Lon_max = MaxLon, Lon_int = IntLon)
?readxl::read_excel
?read.csv
