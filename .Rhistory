# "loadEXCEL" FUNCTION ---------------------------------
#set the "loadEXCEL" function
loadEXCEL <- function(Dataname="EXCELdataset", Filepath, File=FALSE, Combine=TRUE, Colname=FALSE, Skip=0) {
Package<-installed.packages()
Package<-Package[,1]
if (is.element("readxl", Package)) {
library(readxl)
} else {
install.packages("readxl")
library(readxl)
}
if (is.element("tidyverse", Package)) {
library(tidyverse)
} else {
install.packages("tidyverse")
library(tidyverse)
}
rm(Package)
setwd(Filepath)
if (File[1]==FALSE) {
Filename <- list.files()
} else {
Filename <- File
}
File_list <- data.frame(Filename)
File_input <- File_list %>%
filter(file_extension(Filename) %in% "xlsx")
if (Colname[1]!=FALSE) {
if (File[1]==FALSE & Combine==TRUE) {
for (i in File_input$File) {
if (exists("Dataset")) {
Temp_dataset <- readxl::read_xlsx(i, col_names=Colname, skip=Skip)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- readxl::read_xlsx(i, col_names=Colname, skip=Skip)
}
}
} else if (Combine==TRUE) {
for (i in File){
if (exists("Dataset")) {
Temp_dataset <- readxl::read_xlsx(i, col_names=Colname, skip=Skip)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- readxl::read_xlsx(i, col_names=Colname, skip=Skip)
}
}
} else if (File[1]==FALSE & Combine==FALSE) {
Dataset <- list()
for (i in File_input$File) {
Dataset[[i]] <- readxl::read_xlsx(i, col_names=Colname, skip=Skip)
}
} else {
Dataset <- list()
for (i in File) {
Dataset[[i]] <- readxl::read_xlsx(i, col_names=Colname, skip=Skip)
}
}
} else {
if (File[1]==FALSE & Combine==TRUE) {
for (i in File_input$File) {
if (exists("Dataset")) {
Temp_dataset <- readxl::read_xlsx(i, skip=Skip)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- readxl::read_xlsx(i, skip=Skip)
}
}
} else if (Combine==TRUE) {
for (i in File){
if (exists("Dataset")) {
Temp_dataset <- readxl::read_xlsx(i, skip=Skip)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- readxl::read_xlsx(i, skip=Skip)
}
}
} else if (File[1]==FALSE & Combine==FALSE) {
Dataset <- list()
for (i in File_input$File) {
Dataset[[i]] <- readxl::read_xlsx(i, skip=Skip)
}
} else {
Dataset <- list()
for (i in File) {
Dataset[[i]] <- readxl::read_xlsx(i, skip=Skip)
}
}
}
assign(Dataname, Dataset, .GlobalEnv)
rm(File_list, File_input, i, Dataset)
}
loadEXCEL(Filepath=Filepath,Colname=Colname)
View(EXCELdataset)
?read.csv
View(DELIMdataset)
loadDELIM(Filepath=Filepath,Colname=Colname)
View(DELIMdataset)
loadDELIM(Filepath=Filepath,Colname=Colname,Header=F)
View(DELIMdataset)
?read.table
devtools::load_all("D:/HsuWP/GIT/Rproject/loadFile")
devtools::load_all("D:/HsuWP/GIT/Rproject/loadFile")
rm(list = c("loadDELIM", "loadEXCEL"))
devtools::load_all("D:/HsuWP/GIT/Rproject/loadFile")
library("loadFile")
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/data")
}
getwd()
setwd("D:/HsuWP/GIT/Rproject/loadFile")
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/data")
}
# test load csv file
testthat::test_that(
"Load all csv files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
path
library("loadFile")
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"tests/testthat/data")
}
path
library("loadFile")
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/tests/testthat/data")
}
path
# test load csv file
testthat::test_that(
"Load all csv files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
# test load csv file
testthat::test_that(
"Load all csv files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/tests/testthat/data")
}
# test load csv file
testthat::test_that(
"Load all csv files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
?loadDELIM
?loadEXCEL
loadDELIM(Filepath=path)
# "loadDELIM" FUNCTION ---------------------------------
#set the "loadDELIM" function
loadDELIM <- function(Dataname="DELIMdataset", Filepath, File=FALSE, Combine=TRUE,
FileExtension="csv", Header=TRUE, Sep=",", Colname=FALSE, Encoding=FALSE) {
Package<-installed.packages()
Package<-Package[,1]
loadDELIM(Filepath=Filepath,Header=F)
if (is.element("tidyverse", Package)) {
library(tidyverse)
} else {
install.packages("tidyverse")
library(tidyverse)
}
rm(Package)
setwd(Filepath)
if (File[1]==FALSE) {
Filename <- list.files()
} else {
Filename <- File
}
File_list <- data.frame(Filename)
File_input <- File_list %>%
filter(file_extension(Filename) %in% FileExtension)
if (Colname[1]!=FALSE) {
if (File[1]==FALSE & Combine==TRUE) {
for (i in File_input$File) {
if (exists("Dataset")) {
Temp_dataset <- read.csv(i, header=Header, sep=Sep, col.names=Colname)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- read.csv(i, header=Header, sep=Sep, col.names=Colname)
}
}
} else if (Combine!=TRUE) {
for (i in File){
if (exists("Dataset")) {
Temp_dataset <- read.csv(i, header=Header, sep=Sep, col.names=Colname)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- read.csv(i, header=Header, sep=Sep, col.names=Colname)
}
}
} else if (File[1]==FALSE & Combine==FALSE) {
Dataset <- list()
for (i in File_input$File) {
Dataset[[i]] <- read.csv(i, header=Header, sep=Sep, col.names=Colname)
}
} else {
Dataset <- list()
for (i in File) {
Dataset[[i]] <- read.csv(i, header=Header, sep=Sep, col.names=Colname)
}
}
} else if (Encoding!=FALSE) {
if (File[1]==FALSE & Combine==TRUE) {
for (i in File_input$File) {
if (exists("Dataset")) {
Temp_dataset <- read.csv(i, header=TRUE, sep=Sep, fileEncoding=Encoding)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- read.csv(i, header=TRUE, sep=Sep, fileEncoding=Encoding)
}
}
} else if (Combine==TRUE) {
for (i in File){
if (exists("Dataset")) {
Temp_dataset <- read.csv(i, header=TRUE, sep=Sep, fileEncoding=Encoding)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- read.csv(i, header=TRUE, sep=Sep, fileEncoding=Encoding)
}
}
} else if (File[1]==FALSE & Combine==FALSE) {
Dataset <- list()
for (i in File_input$File) {
Dataset[[i]] <- read.csv(i, header=TRUE, sep=Sep, fileEncoding=Encoding)
}
} else {
Dataset <- list()
for (i in File) {
Dataset[[i]] <- read.csv(i, header=TRUE, sep=Sep, fileEncoding=Encoding)
}
}
} else {
if (File[1]==FALSE & Combine==TRUE) {
for (i in File_input$File) {
if (exists("Dataset")) {
Temp_dataset <- read.csv(i, header=Header, sep=Sep)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- read.csv(i, header=Header, sep=Sep)
}
}
} else if (Combine==TRUE) {
for (i in File){
if (exists("Dataset")) {
Temp_dataset <- read.csv(i, header=Header, sep=Sep)
Dataset <- rbind(Dataset, Temp_dataset)
rm(Temp_dataset)
} else {
Dataset <- read.csv(i, header=Header, sep=Sep)
}
}
} else if (File[1]==FALSE & Combine==FALSE) {
Dataset <- list()
for (i in File_input$File) {
Dataset[[i]] <- read.csv(i, header=Header, sep=Sep)
}
} else {
Dataset <- list()
for (i in File) {
Dataset[[i]] <- read.csv(i, header=Header, sep=Sep)
}
}
}
assign(Dataname, Dataset, .GlobalEnv)
rm(File_list, File_input, i, Dataset)
}
loadDELIM(Filepath=path)
View(loadDELIM)
Package<-installed.packages()
Package<-Package[,1]
devtools::load_all(".")
library("loadFile")
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/tests/testthat/data")
}
# test load csv file
testthat::test_that(
"Load all csv files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
testthat::test_that(
"Load a.csv and c.csv, then become two tibbles in Test_data.", {
a <- read.csv(paste0(path,"/a.csv"))
c <- read.csv(paste0(path,"/c.csv"))
ac <- rbind(a,c)
ac_list <- list(a,c)
names(ac_list) <- c("a.csv", "c.csv")
loadDELIM(Dataname=c("Test_data"), Filepath=path, File=c("a.csv", "c.csv"), Combine=FALSE)
expect_equal(Test_data, ac_list)
expect_failure(expect_equal(Test_data, ac))
}
)
testthat::test_that(
"Load all csv files and skip column title, then set the new.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
loadDELIM(Filepath=path, Colname=c("Name_d", "H", "W", "score"))
expect_equal(DELIMdataset, abc)
}
)
testthat::test_that(
"Load all csv files and skip column title, then set the new.", {
a <- read.csv(paste0(path,"/a.csv"))
b <- read.csv(paste0(path,"/b.csv"))
c <- read.csv(paste0(path,"/c.csv"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path, Colname=c("Name_d", "H", "W", "score"))
expect_equal(DELIMdataset, abc)
}
)
testthat::test_that(
"Load all csv files and skip column title, then set the new.", {
a <- read.csv(paste0(path,"/a.csv"), col_names=c("Name_d", "H", "W", "score"))
b <- read.csv(paste0(path,"/b.csv"), col_names=c("Name_d", "H", "W", "score"))
c <- read.csv(paste0(path,"/c.csv"), col_names=c("Name_d", "H", "W", "score"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path, Colname=c("Name_d", "H", "W", "score"))
expect_equal(DELIMdataset, abc)
}
)
?read.csv
testthat::test_that(
"Load all csv files and skip column title, then set the new.", {
a <- read.csv(paste0(path,"/a.csv"), col.names=c("Name_d", "H", "W", "score"))
b <- read.csv(paste0(path,"/b.csv"), col.names=c("Name_d", "H", "W", "score"))
c <- read.csv(paste0(path,"/c.csv"), col.names=c("Name_d", "H", "W", "score"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path, Colname=c("Name_d", "H", "W", "score"))
expect_equal(DELIMdataset, abc)
}
)
devtools::load_all("D:/HsuWP/GIT/Rproject/loadFile")
# test load txt file
testthat::test_that(
"Load all txt files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.txt"), FileExtension="txt", Sep="")
b <- read.csv(paste0(path,"/b.txt"), FileExtension="txt", Sep="")
c <- read.csv(paste0(path,"/c.txt"), FileExtension="txt", Sep="")
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
library("loadFile")
# test load txt file
testthat::test_that(
"Load all txt files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.txt"), FileExtension="txt", Sep="")
b <- read.csv(paste0(path,"/b.txt"), FileExtension="txt", Sep="")
c <- read.csv(paste0(path,"/c.txt"), FileExtension="txt", Sep="")
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
# test load txt file
testthat::test_that(
"Load all txt files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.txt"), sep="")
b <- read.csv(paste0(path,"/b.txt"), sep="")
c <- read.csv(paste0(path,"/c.txt"), sep="")
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
devtools::load_all("D:/HsuWP/GIT/Rproject/loadFile")
library("loadFile")
# test load txt file
testthat::test_that(
"Load all txt files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.txt"), sep="")
b <- read.csv(paste0(path,"/b.txt"), sep="")
c <- read.csv(paste0(path,"/c.txt"), sep="")
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/tests/testthat/data")
}
setwd()
library("loadFile")
path <- getwd()
if (grepl("/tests/testthat/data", getwd())) {
path <- path
} else {
path <- paste0(getwd(),"/tests/testthat/data")
}
# test load txt file
testthat::test_that(
"Load all txt files that are in the folder and combine them.", {
a <- read.csv(paste0(path,"/a.txt"), sep="")
b <- read.csv(paste0(path,"/b.txt"), sep="")
c <- read.csv(paste0(path,"/c.txt"), sep="")
abc <- rbind(a,b,c)
loadDELIM(Filepath=path)
expect_equal(DELIMdataset, abc)
}
)
testthat::test_that(
"Load a.txt and c.txt, then become two tibbles in Test_data.", {
a <- read.csv(paste0(path,"/a.txt"), sep="")
c <- read.csv(paste0(path,"/c.txt"), sep="")
ac <- rbind(a,c)
ac_list <- list(a,c)
names(ac_list) <- c("a.txt", "c.txt")
loadDELIM(Dataname=c("Test_data"), Filepath=path, File=c("a.txt", "c.txt"), Combine=FALSE, FileExtension="txt", Sep="")
expect_equal(Test_data, ac_list)
expect_failure(expect_equal(Test_data, ac))
}
)
testthat::test_that(
"Load all csv files and skip column title, then set the new.", {
a <- read.csv(paste0(path,"/a.txt"), sep="")
b <- read.csv(paste0(path,"/b.txt"), sep="")
c <- read.csv(paste0(path,"/c.txt"), sep="")
loadDELIM(Filepath=path, FileExtension="txt", Sep="", Colname=c("Name_d", "H", "W", "score"))
expect_equal(DELIMdataset, abc)
}
)
View(DELIMdataset)
View(Test_data)
testthat::test_that(
"Load all csv files and skip column title, then set the new.", {
a <- read.csv(paste0(path,"/a.txt"), sep="", col.names=c("Name_d", "H", "W", "score"))
b <- read.csv(paste0(path,"/b.txt"), sep="", col.names=c("Name_d", "H", "W", "score"))
c <- read.csv(paste0(path,"/c.txt"), sep="", col.names=c("Name_d", "H", "W", "score"))
abc <- rbind(a,b,c)
loadDELIM(Filepath=path, FileExtension="txt", Sep="", Colname=c("Name_d", "H", "W", "score"))
expect_equal(DELIMdataset, abc)
}
)
path
?requireNamespace
?filter
?read_xlsx
?tidyverse
install.packages("dplyr")
install.packages("dplyr")
install.packages("readxl")
?utils
?install.packages
?installed.packages
?read.csv
?filter
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
?magrittr
